From 4d77dc4727b37b1b814bc755ed1e527f7424e93e Mon Sep 17 00:00:00 2001
From: afl1 <afl2001@gmail.com>
Date: Wed, 10 Apr 2019 10:24:52 +0200
Subject: [PATCH] Remove EGL debug

---
 xbmc/rendering/gles/RenderSystemGLES.cpp |  3 +-
 xbmc/utils/EGLUtils.cpp                  | 23 +++++++++++
 xbmc/utils/GLUtils.cpp                   | 52 +++++++++++++-----------
 3 files changed, 54 insertions(+), 24 deletions(-)

diff --git a/xbmc/rendering/gles/RenderSystemGLES.cpp b/xbmc/rendering/gles/RenderSystemGLES.cpp
index be337833c28..d9bff2bbe08 100644
--- a/xbmc/rendering/gles/RenderSystemGLES.cpp
+++ b/xbmc/rendering/gles/RenderSystemGLES.cpp
@@ -71,7 +71,8 @@ bool CRenderSystemGLES::InitRenderSystem()
 
   m_RenderExtensions += " ";
 
-#if defined(GL_KHR_debug) && defined(TARGET_LINUX)
+#if defined(GL_KHR_debug) && defined(TARGET_LINUX) \
+    && !defined(HAS_LIBAMCODEC)
   if (CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_openGlDebugging)
   {
     if (IsExtSupported("GL_KHR_debug"))
diff --git a/xbmc/utils/EGLUtils.cpp b/xbmc/utils/EGLUtils.cpp
index 0d7c23891c0..143350c8fc3 100644
--- a/xbmc/utils/EGLUtils.cpp
+++ b/xbmc/utils/EGLUtils.cpp
@@ -21,6 +21,20 @@
 
 namespace
 {
+#if defined(HAS_LIBAMCODEC)
+#ifndef EGL_NO_CONFIG_KHR
+#define EGL_NO_CONFIG_KHR static_cast<EGLConfig>(0)
+#endif
+#ifndef EGL_CONTEXT_PRIORITY_LEVEL_IMG
+#define EGL_CONTEXT_PRIORITY_LEVEL_IMG 0x3100
+#endif
+#ifndef EGL_CONTEXT_PRIORITY_HIGH_IMG
+#define EGL_CONTEXT_PRIORITY_HIGH_IMG 0x3101
+#endif
+#ifndef EGL_CONTEXT_PRIORITY_MEDIUM_IMG
+#define EGL_CONTEXT_PRIORITY_MEDIUM_IMG 0x3102
+#endif
+#endif
 
 #define X(VAL) std::make_pair(VAL, #VAL)
 std::map<EGLint, const char*> eglAttributes =
@@ -84,15 +98,18 @@ std::map<EGLenum, const char*> eglErrors =
 
 std::map<EGLint, const char*> eglErrorType =
 {
+#if !defined(HAS_LIBAMCODEC)
   X(EGL_DEBUG_MSG_CRITICAL_KHR),
   X(EGL_DEBUG_MSG_ERROR_KHR),
   X(EGL_DEBUG_MSG_WARN_KHR),
   X(EGL_DEBUG_MSG_INFO_KHR),
+#endif
 };
 #undef X
 
 } // namespace
 
+#if !defined(HAS_LIBAMCODEC)
 void EglErrorCallback(EGLenum error,
                       const char* command,
                       EGLint messageType,
@@ -117,6 +134,7 @@ void EglErrorCallback(EGLenum error,
 
   CLog::Log(LOGDEBUG, "EGL Debugging:\nError: {}\nCommand: {}\nType: {}\nMessage: {}", errorStr, command, typeStr, message);
 }
+#endif
 
 std::set<std::string> CEGLUtils::GetClientExtensions()
 {
@@ -171,6 +189,8 @@ void CEGLUtils::Log(int logLevel, const std::string& what)
 CEGLContextUtils::CEGLContextUtils(EGLenum platform, std::string const& platformExtension)
 : m_platform{platform}
 {
+
+#if !defined(HAS_LIBAMCODEC)
   if (CEGLUtils::HasClientExtension("EGL_KHR_debug"))
   {
     auto eglDebugMessageControl = CEGLUtils::GetRequiredProcAddress<PFNEGLDEBUGMESSAGECONTROLKHRPROC>("eglDebugMessageControlKHR");
@@ -183,6 +203,7 @@ CEGLContextUtils::CEGLContextUtils(EGLenum platform, std::string const& platform
 
     eglDebugMessageControl(EglErrorCallback, eglDebugAttribs);
   }
+#endif
 
   m_platformSupported = CEGLUtils::HasClientExtension("EGL_EXT_platform_base") && CEGLUtils::HasClientExtension(platformExtension);
 }
@@ -397,11 +418,13 @@ bool CEGLContextUtils::CreateContext(CEGLAttributesVec contextAttribs)
   if (CEGLUtils::HasExtension(m_eglDisplay, "EGL_IMG_context_priority"))
     contextAttribs.Add({{EGL_CONTEXT_PRIORITY_LEVEL_IMG, EGL_CONTEXT_PRIORITY_HIGH_IMG}});
 
+#if !defined(HAS_LIBAMCODEC)
   if (CEGLUtils::HasExtension(m_eglDisplay, "EGL_KHR_create_context") &&
       CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_openGlDebugging)
   {
     contextAttribs.Add({{EGL_CONTEXT_FLAGS_KHR, EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR}});
   }
+#endif
 
   m_eglContext = eglCreateContext(m_eglDisplay, eglConfig,
                                   EGL_NO_CONTEXT, contextAttribs.Get());
diff --git a/xbmc/utils/GLUtils.cpp b/xbmc/utils/GLUtils.cpp
index 1ef804709ff..fa98936009a 100644
--- a/xbmc/utils/GLUtils.cpp
+++ b/xbmc/utils/GLUtils.cpp
@@ -39,35 +39,41 @@ std::map<GLenum, const char*> glErrors =
 #endif
 };
 
-std::map<GLenum, const char*> glErrorSource = {
-#if defined(HAS_GLES) && defined(TARGET_LINUX)
-    X(GL_DEBUG_SOURCE_API_KHR),
-    X(GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR),
-    X(GL_DEBUG_SOURCE_SHADER_COMPILER_KHR),
-    X(GL_DEBUG_SOURCE_THIRD_PARTY_KHR),
-    X(GL_DEBUG_SOURCE_APPLICATION_KHR),
-    X(GL_DEBUG_SOURCE_OTHER_KHR),
+std::map<GLenum, const char*> glErrorSource =
+{
+#if defined(HAS_GLES) && defined(TARGET_LINUX) \
+    && !defined(HAS_LIBAMCODEC)
+  X(GL_DEBUG_SOURCE_API_KHR),
+  X(GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR),
+  X(GL_DEBUG_SOURCE_SHADER_COMPILER_KHR),
+  X(GL_DEBUG_SOURCE_THIRD_PARTY_KHR),
+  X(GL_DEBUG_SOURCE_APPLICATION_KHR),
+  X(GL_DEBUG_SOURCE_OTHER_KHR),
 #endif
 };
 
-std::map<GLenum, const char*> glErrorType = {
-#if defined(HAS_GLES) && defined(TARGET_LINUX)
-    X(GL_DEBUG_TYPE_ERROR_KHR),
-    X(GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR),
-    X(GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR),
-    X(GL_DEBUG_TYPE_PORTABILITY_KHR),
-    X(GL_DEBUG_TYPE_PERFORMANCE_KHR),
-    X(GL_DEBUG_TYPE_OTHER_KHR),
-    X(GL_DEBUG_TYPE_MARKER_KHR),
+std::map<GLenum, const char*> glErrorType =
+{
+#if defined(HAS_GLES) && defined(TARGET_LINUX) \
+    && !defined(HAS_LIBAMCODEC)
+  X(GL_DEBUG_TYPE_ERROR_KHR),
+  X(GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR),
+  X(GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR),
+  X(GL_DEBUG_TYPE_PORTABILITY_KHR),
+  X(GL_DEBUG_TYPE_PERFORMANCE_KHR),
+  X(GL_DEBUG_TYPE_OTHER_KHR),
+  X(GL_DEBUG_TYPE_MARKER_KHR),
 #endif
 };
 
-std::map<GLenum, const char*> glErrorSeverity = {
-#if defined(HAS_GLES) && defined(TARGET_LINUX)
-    X(GL_DEBUG_SEVERITY_HIGH_KHR),
-    X(GL_DEBUG_SEVERITY_MEDIUM_KHR),
-    X(GL_DEBUG_SEVERITY_LOW_KHR),
-    X(GL_DEBUG_SEVERITY_NOTIFICATION_KHR),
+std::map<GLenum, const char*> glErrorSeverity =
+{
+#if defined(HAS_GLES) && defined(TARGET_LINUX) \
+    && !defined(HAS_LIBAMCODEC)
+  X(GL_DEBUG_SEVERITY_HIGH_KHR),
+  X(GL_DEBUG_SEVERITY_MEDIUM_KHR),
+  X(GL_DEBUG_SEVERITY_LOW_KHR),
+  X(GL_DEBUG_SEVERITY_NOTIFICATION_KHR),
 #endif
 };
 #undef X
