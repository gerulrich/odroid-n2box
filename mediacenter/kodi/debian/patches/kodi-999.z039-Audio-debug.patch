From 6c37b3b23741e1a6a2d0a1b4761db80eddb09d88 Mon Sep 17 00:00:00 2001
From: afl1 <afl2001@gmail.com>
Date: Mon, 11 Mar 2019 20:16:21 +0100
Subject: [PATCH] Audio debug

Use sec based time instead of usec for audio debug logging.

Patch: kodi-le-041-audio-debug.patch
---
 xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAE.cpp | 2 ++
 xbmc/cores/VideoPlayer/VideoPlayer.cpp               | 7 +++++--
 xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp          | 8 ++++++--
 3 files changed, 13 insertions(+), 4 deletions(-)

diff --git a/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAE.cpp b/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAE.cpp
index f839fc44bc9..c59f86d415b 100644
--- a/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAE.cpp
+++ b/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAE.cpp
@@ -2449,6 +2449,7 @@ CSampleBuffer* CActiveAE::SyncStream(CActiveAEStream *stream)
             memset(ret->pkt->data[i], 0, ret->pkt->linesize);
           }
         }
+        CLog::Log(LOGDEBUG, LOGAUDIO, "ActiveAE::SyncStream - delay frames:%d error %0.0fms", framesToDelay, error);
 
         if ((ret->pkt->nb_samples == 0) && (ret->pkt->pause_burst_ms == 0))
         {
@@ -2491,6 +2492,7 @@ CSampleBuffer* CActiveAE::SyncStream(CActiveAEStream *stream)
         stream->m_syncError.Correction((double)framesToSkip * 1000 / buf->pkt->config.sample_rate);
         error += (double)framesToSkip * 1000 / buf->pkt->config.sample_rate;
       }
+      CLog::Log(LOGDEBUG, LOGAUDIO, "ActiveAE::SyncStream - skip frames:%d error %0.0fms", framesToSkip, error);
     }
 
     if (fabs(error) < 30)
diff --git a/xbmc/cores/VideoPlayer/VideoPlayer.cpp b/xbmc/cores/VideoPlayer/VideoPlayer.cpp
index 7a98053ae94..8aa1509f3a2 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayer.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayer.cpp
@@ -1640,6 +1640,8 @@ void CVideoPlayer::ProcessAudioData(CDemuxStream* pStream, DemuxPacket* pPacket)
   {
     drop = true;
   }
+  CLog::Log(LOGDEBUG, LOGAUDIO, "CVideoPlayer::ProcessAudioData size:%d dts:%0.3f pts:%0.3f dur:%0.3fms, clock:%0.3f drop:%d level:%d",
+    pPacket->iSize, pPacket->dts/DVD_TIME_BASE, pPacket->pts/DVD_TIME_BASE, pPacket->duration/1000.0, m_clock.GetClock() / DVD_TIME_BASE, drop, m_VideoPlayerAudio->GetLevel());
 
   m_VideoPlayerAudio->SendMessage(new CDVDMsgDemuxerPacket(pPacket, drop));
 
@@ -1924,6 +1926,7 @@ void CVideoPlayer::HandlePlaySpeed()
         (m_CurrentAudio.avsync == CCurrentStream::AV_SYNC_CONT ||
          m_CurrentVideo.syncState == IDVDStreamPlayer::SYNC_INSYNC))
     {
+      CLog::Log(LOGDEBUG, LOGAUDIO, "VideoPlayer::Sync - Audio - Waiting, clock: %0.3f", m_clock.GetClock());
       m_CurrentAudio.syncState = IDVDStreamPlayer::SYNC_INSYNC;
       m_CurrentAudio.avsync = CCurrentStream::AV_SYNC_NONE;
       m_VideoPlayerAudio->SendMessage(new CDVDMsgDouble(CDVDMsg::GENERAL_RESYNC, m_clock.GetClock()), 1);
@@ -2130,7 +2133,7 @@ bool CVideoPlayer::CheckPlayerInit(CCurrentStream& current)
   {
     if(current.dts == DVD_NOPTS_VALUE)
     {
-      CLog::Log(LOGDEBUG, "%s - dropping packet type:%d dts:%f to get to start point at %f", __FUNCTION__, current.player,  current.dts, current.startpts);
+      CLog::Log(LOGDEBUG, LOGAUDIO, "CVideoPlayer::%s - Dropping packet type:%d dts:%0.3f to get to start point at %0.3f", __FUNCTION__, current.player,  current.dts / 1000000.0, current.startpts / 1000000.0);
       return true;
     }
 
@@ -2151,7 +2154,7 @@ bool CVideoPlayer::CheckPlayerInit(CCurrentStream& current)
 
     if(current.dts < current.startpts)
     {
-      CLog::Log(LOGDEBUG, "%s - dropping packet type:%d dts:%f to get to start point at %f", __FUNCTION__, current.player,  current.dts, current.startpts);
+      CLog::Log(LOGDEBUG, LOGAUDIO, "CVideoPlayer::%s - dropping packet type:%d dts:%0.3f to get to start point at %0.3f", __FUNCTION__, current.player,  current.dts / 1000000.0, current.startpts / 1000000.0);
       return true;
     }
   }
diff --git a/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp b/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
index cce4b30b434..221442e7844 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
@@ -305,8 +305,8 @@ void CVideoPlayerAudio::Process()
     else if (pMsg->IsType(CDVDMsg::GENERAL_RESYNC))
     { //player asked us to set internal clock
       double pts = static_cast<CDVDMsgDouble*>(pMsg)->m_value;
-      CLog::Log(LOGDEBUG, "CVideoPlayerAudio - CDVDMsg::GENERAL_RESYNC(%f), level: %d, cache: %f",
-                pts, m_messageQueue.GetLevel(), m_audioSink.GetDelay());
+      CLog::Log(LOGDEBUG, LOGAUDIO, "CVideoPlayerAudio - CDVDMsg::GENERAL_RESYNC(%0.3f level: %d cache:%0.3f",
+                pts / DVD_TIME_BASE, m_messageQueue.GetLevel(), m_audioSink.GetDelay() / DVD_TIME_BASE);
 
       double delay = m_audioSink.GetDelay();
       if (pts > m_audioClock - delay + 0.5 * DVD_TIME_BASE)
@@ -353,6 +353,7 @@ void CVideoPlayerAudio::Process()
     else if (pMsg->IsType(CDVDMsg::PLAYER_SETSPEED))
     {
       double speed = static_cast<CDVDMsgInt*>(pMsg)->m_value;
+      CLog::Log(LOGDEBUG, LOGAUDIO, "CVideoPlayerAudio - CDVDMsg::PLAYER_SETSPEED: %lf last: %d", speed, m_speed);
 
       if (m_processInfo.IsTempoAllowed(static_cast<float>(speed)/DVD_PLAYSPEED_NORMAL))
       {
@@ -540,9 +541,12 @@ bool CVideoPlayerAudio::ProcessDecoderOutput(DVDAudioFrame &audioframe)
       if (correction != 0)
       {
         m_audioSink.SetSyncErrorCorrection(-correction);
+      CLog::Log(LOGDEBUG, LOGAUDIO, "CVideoPlayerAudio:: sync error correctiom:%0.3f", correction / DVD_TIME_BASE);
       }
     }
   }
+  CLog::Log(LOGDEBUG, LOGAUDIO, "CVideoPlayerAudio::OutputPacket: pts:%0.3f curr_pts:%0.3f clock:%0.3f level:%d",
+    audioframe.pts / DVD_TIME_BASE, m_info.pts / DVD_TIME_BASE, m_pClock->GetClock() / DVD_TIME_BASE, GetLevel());
 
   int framesOutput = m_audioSink.AddPackets(audioframe);
 
