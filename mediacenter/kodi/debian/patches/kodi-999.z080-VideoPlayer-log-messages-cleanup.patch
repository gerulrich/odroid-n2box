From fe2a6cea298ac7abba332f19b64e64dc85aecf84 Mon Sep 17 00:00:00 2001
From: afl1 <afl2001@gmail.com>
Date: Sat, 18 May 2019 19:03:14 +0200
Subject: [PATCH] VideoPlayer: log messages cleanup

---
 xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp  | 12 +++---------
 .../cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpeg.cpp |  2 +-
 xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp          | 10 +++++-----
 3 files changed, 9 insertions(+), 15 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
index 5a8287f7ffd..d4bb5c65ce7 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
@@ -1955,8 +1955,6 @@ bool CAMLCodec::AddData(uint8_t *pData, size_t iSize, double dts, double pts)
   // We use this to determine the fill state if no PTS is given
   if (m_cur_pts == DVD_NOPTS_VALUE)
   {
-    m_cur_pts = am_private->am_pkt.avdts * 100 / 9;
-
     // No PTS given -> use first DTS for AML ptsserver initialization
     if ((m_state & STATE_HASPTS) == 0)
       am_private->am_pkt.avpts = am_private->am_pkt.avdts;
@@ -1990,15 +1988,12 @@ bool CAMLCodec::AddData(uint8_t *pData, size_t iSize, double dts, double pts)
   if (iSize > 50000)
     usleep(2000); // wait 2ms to process larger packets
 
-  m_ttd =  static_cast<double>(m_cur_pts) / DVD_TIME_BASE - static_cast<double>(m_hints.pClock->GetClock()) / DVD_TIME_BASE + am_private->video_rate / UNIT_FREQ;
   m_dll->codec_get_vbuf_state(&am_private->vcodec, &bs);
   if (iSize > 0)
-    CLog::Log(LOGDEBUG, LOGVIDEO, "CAMLCodec::AddData: dl:%d sum:%u sz:%u dts_in:%0.3lf pts_in:%0.3lf ptsOut:%0.3f ttd:%0.0fms overflow:%llx", bs.data_len, m_frameSizeSum,
+    CLog::Log(LOGDEBUG, LOGVIDEO, "CAMLCodec::AddData: dl:%d sum:%u sz:%u dts:%0.3lf pts:%0.3lf overflow:%llx", bs.data_len, m_frameSizeSum,
       static_cast<unsigned int>(iSize),
       dts / DVD_TIME_BASE,
       pts / DVD_TIME_BASE,
-      static_cast<float>(m_cur_pts) / DVD_TIME_BASE,
-      m_ttd * 1000.0,
       m_ptsOverflow
     );
   return true;
@@ -2006,7 +2001,6 @@ bool CAMLCodec::AddData(uint8_t *pData, size_t iSize, double dts, double pts)
 
 std::atomic_flag CAMLCodec::m_pollSync = ATOMIC_FLAG_INIT;
 int CAMLCodec::m_pollDevice;
-double CAMLCodec::m_ttd = 0;
 
 int CAMLCodec::PollFrame()
 {
@@ -2097,7 +2091,7 @@ int CAMLCodec::DequeueBuffer()
   m_cur_pts += vbuf.timestamp.tv_usec & 0xFFFFFFFF;
 
   // since ptsOverflow is calculated from decoder input, we have to check at output if the new packets caused overflow increment
-  if ((m_cur_pts - m_hints.pClock->GetClock())  > 1000000000LL)
+  if ((m_cur_pts - m_hints.pClock->GetClock())  > 0x7F000000LL * 100 / 9)
     m_cur_pts -= 0x80000000LL * 100 / 9;
 
   CLog::Log(LOGDEBUG, LOGAVTIMING, "CAMLCodec::DequeueBuffer: pts:%0.3f  idx:%d",
@@ -2149,7 +2143,7 @@ CDVDVideoCodec::VCReturn CAMLCodec::GetPicture(VideoPicture *pVideoPicture)
     pVideoPicture->pts = static_cast<double>(m_cur_pts);
 
     CLog::Log(LOGDEBUG, LOGVIDEO, "CAMLCodec::GetPicture: index: %u, pts: %0.3lf, dur:%0.3lfms",
-		m_bufferIndex, pVideoPicture->pts/DVD_TIME_BASE, pVideoPicture->iDuration / 1000);
+		m_bufferIndex, pVideoPicture->pts / DVD_TIME_BASE, pVideoPicture->iDuration / 1000);
 
     return CDVDVideoCodec::VC_PICTURE;
   }
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpeg.cpp b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpeg.cpp
index 1f6963bb357..04c9133b7f6 100644
--- a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpeg.cpp
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpeg.cpp
@@ -1621,7 +1621,7 @@ CDemuxStream* CDVDDemuxFFmpeg::AddStream(int streamIdx)
           st->bInterlaced = true;
         }
 
-        CLog::Log(LOGDEBUG, "DVDDemuxFFmpeg::%s - fps:%d/%d i/p:%d", __FUNCTION__, st->iFpsRate, st->iFpsScale, st->bInterlaced);
+        CLog::Log(LOGDEBUG, "DVDDemuxFFmpeg::%s - fps:%d/%d%s", __FUNCTION__, st->iFpsRate, st->iFpsScale, st->bInterlaced ? "i" : "p");
 
         if (pStream->codec_info_nb_frames > 0 &&
             pStream->codec_info_nb_frames <= 2 &&
diff --git a/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp b/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp
index acd44c22cfb..86e3e25d625 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp
@@ -941,17 +941,17 @@ CVideoPlayerVideo::EOutputState CVideoPlayerVideo::OutputPicture(const VideoPict
   }
 
   int timeToDisplay = DVD_TIME_TO_MSEC(pPicture->pts - iPlayingClock);
-  std::chrono::time_point<std::chrono::system_clock> now(std::chrono::system_clock::now());
 
   // make sure waiting time is not negative
   int maxWaitTime = std::min(std::max(timeToDisplay + 500, 50), 500);
   // don't wait when going ff
   if (m_speed > DVD_PLAYSPEED_NORMAL)
     maxWaitTime = std::max(timeToDisplay, 0);
-  int buffer = m_renderManager.WaitForBuffer(m_bAbortOutput, maxWaitTime);
-  CLog::Log(LOGDEBUG,"CVideoPlayerVideo::%s - ttd:%dms pts:%0.3lf Clock:%0.3f Level:%d elapsed:%0.3fms",
-        __FUNCTION__, timeToDisplay, pPicture->pts/1000000, iPlayingClock/1000000.0, buffer, std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now() - now).count() / 1000.0);
-  if (buffer < 0)
+
+  int level = m_renderManager.WaitForBuffer(m_bAbortOutput, maxWaitTime);
+  CLog::Log(LOGDEBUG,"CVideoPlayerVideo::%s - ttd:%dms pts:%0.3lf Clock:%0.3f Level:%d",
+        __FUNCTION__, timeToDisplay, pPicture->pts / DVD_TIME_BASE, static_cast<double>(iPlayingClock) / DVD_TIME_BASE, level);
+  if (level < 0)
   {
     if (m_speed != DVD_PLAYSPEED_PAUSE)
       CLog::Log(LOGWARNING, "{} - timeout waiting for buffer", __FUNCTION__);
