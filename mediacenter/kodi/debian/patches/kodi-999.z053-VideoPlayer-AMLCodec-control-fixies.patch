From a10f3b7737061c3a5ee47a7a885cf84c6ef81227 Mon Sep 17 00:00:00 2001
From: afl1 <afl2001@gmail.com>
Date: Wed, 10 Apr 2019 10:22:49 +0200
Subject: [PATCH] VideoPlayer: AMLCodec control fixies

---
 .../VideoPlayer/DVDCodecs/Video/AMLCodec.cpp  | 51 ++++++++++++++-----
 .../VideoPlayer/DVDCodecs/Video/AMLCodec.h    |  1 +
 .../DVDCodecs/Video/DVDVideoCodecAmlogic.cpp  |  1 +
 xbmc/cores/VideoPlayer/DVDStreamInfo.h        |  2 +
 xbmc/cores/VideoPlayer/VideoPlayer.cpp        |  6 +++
 xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp   | 10 +++-
 6 files changed, 56 insertions(+), 15 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
index 3d4853a4ebb..d61eac9e60d 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
@@ -249,7 +249,7 @@ static const int64_t INT64_0 = 0x8000000000000000ULL;
 #define CODEC_TAG_jpeg  (0x6765706a)
 #define CODEC_TAG_mjpa  (0x61706a6d)
 
-#define RW_WAIT_TIME    (20 * 1000) // 20ms
+#define RW_WAIT_TIME    (5 * 1000) // 20ms
 
 #define P_PRE           (0x02000000)
 #define F_PRE           (0x03000000)
@@ -671,7 +671,7 @@ int write_av_packet(am_private_t *para, am_packet_t *pkt)
                 pkt->data += len;
                 pkt->data_size -= len;
                 usleep(RW_WAIT_TIME);
-                CLog::Log(LOGDEBUG, "usleep(RW_WAIT_TIME), len(%d)", len);
+                CLog::Log(LOGDEBUG, "Codec buffer full, try after %d ms, len(%d)", RW_WAIT_TIME / 1000, len);
                 return PLAYER_SUCCESS;
             }
         } else {
@@ -1524,6 +1524,7 @@ bool CAMLCodec::OpenDecoder(CDVDStreamInfo &hints)
   m_state = 0;
   m_frameSizes.clear();
   m_frameSizeSum = 0;
+  m_hints.pClock = hints.pClock;
 
   if (!OpenAmlVideo(hints))
   {
@@ -1845,6 +1846,7 @@ void CAMLCodec::CloseAmlVideo()
 {
   m_amlVideoFile.reset();
   SetVfmMap("default", m_defaultVfmMap);
+  m_amlVideoFile = NULL;
 }
 
 void CAMLCodec::Reset()
@@ -1901,6 +1903,12 @@ bool CAMLCodec::AddData(uint8_t *pData, size_t iSize, double dts, double pts)
   if (!m_opened || !pData)
     return false;
 
+  struct buf_status bs;
+  m_dll->codec_get_vbuf_state(&am_private->vcodec, &bs);
+  if (iSize > (size_t)bs.free_len) {
+    CLog::Log(LOGERROR, "CAMLCodec::AddData: packet to big: %d, probably corrupted", iSize);  
+    return false;
+  }
   m_frameSizes.push_back(iSize);
   m_frameSizeSum += iSize;
 
@@ -1983,11 +1991,21 @@ bool CAMLCodec::AddData(uint8_t *pData, size_t iSize, double dts, double pts)
     Reset();
     return false;
   }
+  if (iSize > 50000)
+    usleep(2000); // wait 2ms to process larger packets
 
-  CLog::Log(LOGDEBUG, LOGVIDEO, "CAMLCodec::AddData: sz: %u, dts_in: %0.4lf[%llX], pts_in: %0.4lf[%llX], overflow:%llx",
+  int64_t cur_pts =  m_cur_pts + m_ptsOverflow;
+  if (static_cast<double>(cur_pts) / PTS_FREQ - static_cast<double>(m_hints.pClock->GetClock()) / DVD_TIME_BASE > 10000.0)
+    cur_pts -= 0x80000000;
+  m_ttd =  static_cast<double>(cur_pts) / PTS_FREQ - static_cast<double>(m_hints.pClock->GetClock()) / DVD_TIME_BASE + am_private->video_rate / UNIT_FREQ;
+  m_dll->codec_get_vbuf_state(&am_private->vcodec, &bs);
+  if (iSize > 0)
+    CLog::Log(LOGDEBUG, LOGVIDEO, "CAMLCodec::AddData: dl:%d sum:%u sz:%u dts_in:%0.3lf pts_in:%0.3lf ptsOut:%0.3f ttd:%0.0fms overflow:%llx", bs.data_len, m_frameSizeSum,
       static_cast<unsigned int>(iSize),
-      dts / DVD_TIME_BASE, am_private->am_pkt.avdts,
-      pts / DVD_TIME_BASE, am_private->am_pkt.avpts,
+      dts / DVD_TIME_BASE,
+      pts / DVD_TIME_BASE,
+      static_cast<float>(cur_pts) / PTS_FREQ,
+      m_ttd * 1000.0,
       m_ptsOverflow
     );
   return true;
@@ -1995,6 +2013,7 @@ bool CAMLCodec::AddData(uint8_t *pData, size_t iSize, double dts, double pts)
 
 std::atomic_flag CAMLCodec::m_pollSync = ATOMIC_FLAG_INIT;
 int CAMLCodec::m_pollDevice;
+double CAMLCodec::m_ttd = 0;
 
 int CAMLCodec::PollFrame()
 {
@@ -2003,16 +2022,16 @@ int CAMLCodec::PollFrame()
     return 0;
 
   struct pollfd codec_poll_fd[1];
+  std::chrono::time_point<std::chrono::system_clock> now(std::chrono::system_clock::now());
 
   codec_poll_fd[0].fd = m_pollDevice;
   codec_poll_fd[0].events = POLLOUT;
 
-  if (poll(codec_poll_fd, 1, 100) > 0)
-  {
-    g_aml_sync_event.Set();
-    return 1;
-  }
-  return 0;
+  poll(codec_poll_fd, 1, 50);
+  g_aml_sync_event.Set();
+  int elapsed = std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now() - now).count();
+  CLog::Log(LOGDEBUG, LOGAVTIMING, "CAMLCodec::PollFrame elapsed:%0.3fms", elapsed / 1000.0);
+  return 1;
 }
 
 void CAMLCodec::SetPollDevice(int dev)
@@ -2061,7 +2080,10 @@ int CAMLCodec::DequeueBuffer()
     if (elapsed < std::chrono::milliseconds(waitTime))
       std::this_thread::sleep_for(std::chrono::milliseconds(waitTime) - elapsed);
 
-    if (m_drain && elapsed < std::chrono::milliseconds(100))
+    int waited = std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now() - now).count();
+    CLog::Log(LOGDEBUG, LOGAVTIMING, "CAMLCodec::DequeueBuffer waited:%0.3fms", waited / 1000.0);
+
+    if (m_drain && elapsed < std::chrono::milliseconds(300))
     {
       waitTime += 10;
       goto DRAIN;
@@ -2095,11 +2117,14 @@ float CAMLCodec::GetTimeSize()
   struct buf_status bs;
   m_dll->codec_get_vbuf_state(&am_private->vcodec, &bs);
 
-  //CLog::Log(LOGDEBUG, "CAMLCodec::Decode: buf status: s:%d dl:%d fl:%d rp:%u wp:%u",bs.size, bs.data_len, bs.free_len, bs.read_pointer, bs.write_pointer);
+  CLog::Log(LOGDEBUG, LOGVIDEO, "CAMLCodec::GetTimeSize: len:%d dl:%d fs:%u front:%u", 
+    m_frameSizes.size(), bs.data_len, m_frameSizeSum, m_frameSizes.front()); 
   while (m_frameSizeSum >  (unsigned int)bs.data_len)
   {
     m_frameSizeSum -= m_frameSizes.front();
     m_frameSizes.pop_front();
+    CLog::Log(LOGDEBUG, LOGVIDEO, "CAMLCodec::GetTimeSize: len:%d dl:%d fs:%u front:%u",
+      m_frameSizes.size(), bs.data_len, m_frameSizeSum, m_frameSizes.front());
   }
   if (bs.free_len < (bs.data_len >> 1))
     return 7.0;
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h
index 2f67ed72a6a..652a31a7a76 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h
@@ -104,5 +104,6 @@ class CAMLCodec
 
   static std::atomic_flag  m_pollSync;
   static int m_pollDevice;
+  static double m_ttd;
   CProcessInfo &m_processInfo;
 };
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp
index 19da75a67ad..c0a12bd0368 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp
@@ -118,6 +118,7 @@ bool CDVDVideoCodecAmlogic::Open(CDVDStreamInfo &hints, CDVDCodecOptions &option
   m_opened = false;
 
   m_hints = hints;
+  m_hints.pClock = hints.pClock;
 
   CLog::Log(LOGDEBUG, "CDVDVideoCodecAmlogic::Opening: codec %d profile:%d extra_size:%d", m_hints.codec, hints.profile, hints.extrasize);
 
diff --git a/xbmc/cores/VideoPlayer/DVDStreamInfo.h b/xbmc/cores/VideoPlayer/DVDStreamInfo.h
index 25049a3b83b..d596dcac771 100644
--- a/xbmc/cores/VideoPlayer/DVDStreamInfo.h
+++ b/xbmc/cores/VideoPlayer/DVDStreamInfo.h
@@ -13,6 +13,7 @@
 extern "C" {
 #include <libavcodec/avcodec.h>
 }
+#include "DVDClock.h"
 
 #define CODEC_FORCE_SOFTWARE 0x01
 #define CODEC_ALLOW_FALLBACK 0x02
@@ -73,6 +74,7 @@ class CDVDStreamInfo
   std::shared_ptr<AVMasteringDisplayMetadata> masteringMetadata;
   std::shared_ptr<AVContentLightMetadata> contentLightMetadata;
   std::string stereo_mode; // stereoscopic 3d mode
+  CDVDClock *pClock;
 
   // AUDIO
   int channels;
diff --git a/xbmc/cores/VideoPlayer/VideoPlayer.cpp b/xbmc/cores/VideoPlayer/VideoPlayer.cpp
index 5026b94c037..686f0b60f76 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayer.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayer.cpp
@@ -1670,6 +1670,12 @@ void CVideoPlayer::ProcessVideoData(CDemuxStream* pStream, DemuxPacket* pPacket)
   if (CheckSceneSkip(m_CurrentVideo))
     drop = true;
 
+  if ((m_CurrentVideo.lastdts == DVD_NOPTS_VALUE || pPacket->dts == DVD_NOPTS_VALUE) && (pPacket->pts != DVD_NOPTS_VALUE))
+    m_clock.Discontinuity(pPacket->pts - DVD_TIME_BASE/2);
+
+  m_CurrentVideo.lastdts = pPacket->dts;
+  CLog::Log(LOGDEBUG, "CVideoPlayer::ProcessVideoData size:%d dts:%0.3f pts:%0.3f dur:%0.3fms, clock:%0.3f level:%d", 
+    pPacket->iSize, pPacket->dts/1000000, pPacket->pts/1000000, pPacket->duration/1000.0, m_clock.GetClock()/1000000.0, m_processInfo->GetLevelVQ());
   m_VideoPlayerVideo->SendMessage(new CDVDMsgDemuxerPacket(pPacket, drop));
 
   if (!drop)
diff --git a/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp b/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp
index b605caa1cb9..2bf0b967b38 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp
@@ -25,6 +25,7 @@
 #include <iterator>
 #include <numeric>
 #include <sstream>
+#include <chrono>
 
 class CDVDMsgVideoCodecChange : public CDVDMsg
 {
@@ -118,7 +119,8 @@ bool CVideoPlayerVideo::OpenStream(CDVDStreamInfo hint)
       return false;
   }
 
-  CLog::Log(LOGINFO, "Creating video codec with codec id: %i", hint.codec);
+  CLog::Log(LOGNOTICE, "CVideoPlayerVideo::%s - Creating codec: %i",__FUNCTION__,  hint.codec);
+  hint.pClock = m_pClock;
 
   if (m_messageQueue.IsInited())
   {
@@ -216,7 +218,8 @@ void CVideoPlayerVideo::OpenStream(CDVDStreamInfo &hint, CDVDVideoCodec* codec)
   }
   if (!codec)
   {
-    CLog::Log(LOGINFO, "Creating video codec with codec id: %i", hint.codec);
+    CLog::Log(LOGNOTICE, "CVideoPlayerVideo::%s - Creating Codec: %i",__FUNCTION__,  hint.codec);
+    hint.pClock = m_pClock;
     hint.codecOptions |= CODEC_ALLOW_FALLBACK;
     codec = CDVDFactoryCodec::CreateVideoCodec(hint, m_processInfo);
     if (!codec)
@@ -930,6 +933,7 @@ CVideoPlayerVideo::EOutputState CVideoPlayerVideo::OutputPicture(const VideoPict
   }
 
   int timeToDisplay = DVD_TIME_TO_MSEC(pPicture->pts - iPlayingClock);
+  std::chrono::time_point<std::chrono::system_clock> now(std::chrono::system_clock::now());
 
   // make sure waiting time is not negative
   int maxWaitTime = std::min(std::max(timeToDisplay + 500, 50), 500);
@@ -937,6 +941,8 @@ CVideoPlayerVideo::EOutputState CVideoPlayerVideo::OutputPicture(const VideoPict
   if (m_speed > DVD_PLAYSPEED_NORMAL)
     maxWaitTime = std::max(timeToDisplay, 0);
   int buffer = m_renderManager.WaitForBuffer(m_bAbortOutput, maxWaitTime);
+  CLog::Log(LOGDEBUG,"CVideoPlayerVideo::%s - ttd:%dms pts:%0.3lf Clock:%0.3f Level:%d elapsed:%0.3fms",
+        __FUNCTION__, timeToDisplay, pPicture->pts/1000000, iPlayingClock/1000000.0, buffer, std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now() - now).count() / 1000.0);
   if (buffer < 0)
   {
     if (m_speed != DVD_PLAYSPEED_PAUSE)
