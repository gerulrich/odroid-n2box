From cb45e1f707474f54af5422b820d8cc83d19d6cc9 Mon Sep 17 00:00:00 2001
From: afl1 <afl2001@gmail.com>
Date: Fri, 17 May 2019 00:49:51 +0200
Subject: [PATCH] amlcodec: use 31 bits fps calculation with fix for negative
 values

---
 .../VideoPlayer/DVDCodecs/Video/AMLCodec.cpp  | 72 +++++++------------
 .../VideoPlayer/DVDCodecs/Video/AMLCodec.h    |  1 -
 2 files changed, 26 insertions(+), 47 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
index 4e9c8f39970..5a8287f7ffd 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
@@ -1469,10 +1469,9 @@ int set_header_info(am_private_t *para)
 /*************************************************************************/
 CAMLCodec::CAMLCodec(CProcessInfo &processInfo)
   : m_opened(false)
-  , m_ptsIs64us(false)
   , m_speed(DVD_PLAYSPEED_NORMAL)
-  , m_cur_pts(INT64_0)
-  , m_last_pts(0)
+  , m_cur_pts(DVD_NOPTS_VALUE)
+  , m_last_pts(DVD_NOPTS_VALUE)
   , m_ptsOverflow(0)
   , m_bufferIndex(-1)
   , m_state(0)
@@ -1518,7 +1517,7 @@ bool CAMLCodec::OpenDecoder(CDVDStreamInfo &hints)
 {
   m_speed = DVD_PLAYSPEED_NORMAL;
   m_drain = false;
-  m_cur_pts = INT64_0;
+  m_cur_pts = DVD_NOPTS_VALUE;
   m_dst_rect.SetRect(0, 0, 0, 0);
   m_zoom = -1.0f;
   m_contrast = -1;
@@ -1755,18 +1754,6 @@ bool CAMLCodec::OpenDecoder(CDVDStreamInfo &hints)
 
   SysfsUtils::SetInt("/sys/class/video/freerun_mode", 1);
 
-
-  struct utsname un;
-  if (uname(&un) == 0)
-  {
-    int linuxversion[2];
-    sscanf(un.release,"%d.%d", &linuxversion[0], &linuxversion[1]);
-    if (linuxversion[0] > 3 || (linuxversion[0] == 3 && linuxversion[1] >= 14))
-      m_ptsIs64us = true;
-  }
-
-  CLog::Log(LOGNOTICE, "CAMLCodec::OpenDecoder - using V4L2 pts format: %s", m_ptsIs64us ? "64Bit":"32Bit");
-
   m_ptsOverflow = 0;
 
   m_opened = true;
@@ -1895,7 +1882,7 @@ void CAMLCodec::Reset()
   SysfsUtils::SetInt("/sys/class/video/blackout_policy", blackout_policy);
 
   // reset some interal vars
-  m_cur_pts = INT64_0;
+  m_cur_pts = DVD_NOPTS_VALUE;
   m_ptsOverflow = 0;
   m_state = 0;
   m_frameSizes.clear();
@@ -1955,20 +1942,21 @@ bool CAMLCodec::AddData(uint8_t *pData, size_t iSize, double dts, double pts)
   {
     if (am_private->am_pkt.avpts != INT64_0)
     {
-      m_ptsOverflow = am_private->am_pkt.avpts & 0xFFFF80000000ULL;
+      m_ptsOverflow = am_private->am_pkt.avpts & 0xFFFFFFFF80000000ULL;
       am_private->am_pkt.avpts &= 0x7FFFFFFF;
     }
     if (am_private->am_pkt.avdts != INT64_0)
     {
-      m_ptsOverflow = am_private->am_pkt.avdts & 0xFFFF80000000ULL;
+      m_ptsOverflow = am_private->am_pkt.avdts & 0xFFFFFFFF80000000ULL;
       am_private->am_pkt.avdts &= 0x7FFFFFFF;
     }
   }
 
   // We use this to determine the fill state if no PTS is given
-  if (m_cur_pts == INT64_0)
+  if (m_cur_pts == DVD_NOPTS_VALUE)
   {
-    m_cur_pts = am_private->am_pkt.avdts;
+    m_cur_pts = am_private->am_pkt.avdts * 100 / 9;
+
     // No PTS given -> use first DTS for AML ptsserver initialization
     if ((m_state & STATE_HASPTS) == 0)
       am_private->am_pkt.avpts = am_private->am_pkt.avdts;
@@ -2002,17 +1990,14 @@ bool CAMLCodec::AddData(uint8_t *pData, size_t iSize, double dts, double pts)
   if (iSize > 50000)
     usleep(2000); // wait 2ms to process larger packets
 
-  int64_t cur_pts =  m_cur_pts + m_ptsOverflow;
-  if (static_cast<double>(cur_pts) / PTS_FREQ - static_cast<double>(m_hints.pClock->GetClock()) / DVD_TIME_BASE > 10000.0)
-    cur_pts -= 0x80000000;
-  m_ttd =  static_cast<double>(cur_pts) / PTS_FREQ - static_cast<double>(m_hints.pClock->GetClock()) / DVD_TIME_BASE + am_private->video_rate / UNIT_FREQ;
+  m_ttd =  static_cast<double>(m_cur_pts) / DVD_TIME_BASE - static_cast<double>(m_hints.pClock->GetClock()) / DVD_TIME_BASE + am_private->video_rate / UNIT_FREQ;
   m_dll->codec_get_vbuf_state(&am_private->vcodec, &bs);
   if (iSize > 0)
     CLog::Log(LOGDEBUG, LOGVIDEO, "CAMLCodec::AddData: dl:%d sum:%u sz:%u dts_in:%0.3lf pts_in:%0.3lf ptsOut:%0.3f ttd:%0.0fms overflow:%llx", bs.data_len, m_frameSizeSum,
       static_cast<unsigned int>(iSize),
       dts / DVD_TIME_BASE,
       pts / DVD_TIME_BASE,
-      static_cast<float>(cur_pts) / PTS_FREQ,
+      static_cast<float>(m_cur_pts) / DVD_TIME_BASE,
       m_ttd * 1000.0,
       m_ptsOverflow
     );
@@ -2105,25 +2090,19 @@ int CAMLCodec::DequeueBuffer()
     int waited = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now() - now).count();
     CLog::Log(LOGDEBUG, LOGAVTIMING, "CAMLCodec::DequeueBuffer waited:%0.3fms", waited / 1000.0);
   }
-  else
-    CLog::Log(LOGDEBUG, LOGAVTIMING, "CAMLCodec::DequeueBuffer vidioc_dqbuf successful");
 
-  // Since kernel 3.14 Amlogic changed length and units of PTS values reported here.
-  // To differentiate such PTS values we check for existence of omx_pts_interval_lower
-  // parameter, because it was introduced since kernel 3.14.
   m_last_pts = m_cur_pts;
 
-  if (m_ptsIs64us)
-  {
-    m_cur_pts = vbuf.timestamp.tv_sec & 0xFFFFFFFF;
-    m_cur_pts <<= 32;
-    m_cur_pts += vbuf.timestamp.tv_usec & 0xFFFFFFFF;
-    m_cur_pts = (m_cur_pts * PTS_FREQ) / DVD_TIME_BASE;
-  }
-  else
-  {
-    m_cur_pts = vbuf.timestamp.tv_usec;
-  }
+  m_cur_pts = m_ptsOverflow * 100 / 9 + (static_cast<int64_t>(vbuf.timestamp.tv_sec) << 32);
+  m_cur_pts += vbuf.timestamp.tv_usec & 0xFFFFFFFF;
+
+  // since ptsOverflow is calculated from decoder input, we have to check at output if the new packets caused overflow increment
+  if ((m_cur_pts - m_hints.pClock->GetClock())  > 1000000000LL)
+    m_cur_pts -= 0x80000000LL * 100 / 9;
+
+  CLog::Log(LOGDEBUG, LOGAVTIMING, "CAMLCodec::DequeueBuffer: pts:%0.3f  idx:%d",
+			static_cast<double>(m_cur_pts) /  DVD_TIME_BASE, vbuf.index);
+
   m_bufferIndex = vbuf.index;
   return 0;
 }
@@ -2161,15 +2140,16 @@ CDVDVideoCodec::VCReturn CAMLCodec::GetPicture(VideoPicture *pVideoPicture)
   {
     pVideoPicture->iFlags = 0;
 
-    if (m_last_pts <= 0)
+    if (m_last_pts == DVD_NOPTS_VALUE)
       pVideoPicture->iDuration = static_cast<double>(am_private->video_rate * DVD_TIME_BASE) / UNIT_FREQ;
     else
-      pVideoPicture->iDuration = static_cast<double>((0x7FFFFFFF & (m_cur_pts - m_last_pts)) * DVD_TIME_BASE) / PTS_FREQ;
+      pVideoPicture->iDuration = static_cast<double>(0x7FFFFFFF & (m_cur_pts - m_last_pts));
 
     pVideoPicture->dts = DVD_NOPTS_VALUE;
-    pVideoPicture->pts = static_cast<double>(m_cur_pts + m_ptsOverflow) * DVD_TIME_BASE / PTS_FREQ;
+    pVideoPicture->pts = static_cast<double>(m_cur_pts);
 
-    CLog::Log(LOGDEBUG, LOGVIDEO, "CAMLCodec::GetPicture: index: %u, pts: %0.4lf[%llX], overflow: %llX",m_bufferIndex, pVideoPicture->pts/DVD_TIME_BASE, m_cur_pts, m_ptsOverflow);
+    CLog::Log(LOGDEBUG, LOGVIDEO, "CAMLCodec::GetPicture: index: %u, pts: %0.3lf, dur:%0.3lfms",
+		m_bufferIndex, pVideoPicture->pts/DVD_TIME_BASE, pVideoPicture->iDuration / 1000);
 
     return CDVDVideoCodec::VC_PICTURE;
   }
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h
index 652a31a7a76..2a6aaa43b0c 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h
@@ -70,7 +70,6 @@ class CAMLCodec
 
   DllLibAmCodec   *m_dll;
   bool             m_opened;
-  bool             m_ptsIs64us;
   bool             m_drain = false;
   am_private_t    *am_private;
   CDVDStreamInfo   m_hints;
